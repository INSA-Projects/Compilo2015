/* Generated By:JavaCC: Do not edit this line. Gram.java */
public class Gram implements GramConstants {
  public static void main(String args[])
  {
    Gram parser;
    java.io.InputStream input;

    if (args.length==1)
    {
      System.out.print(args[args.length-1] + ": ");
      try
      {
        input = new java.io.FileInputStream(args[args.length-1]);
      }
      catch (java.io.FileNotFoundException e)
      {
        System.out.println("Fichier introuvable.");
        return;
      }
    }
    else if (args.length==0)
    {
      System.out.println("Lecture sur l'entree standard...");
      input = System.in;
    }
    else
    {
      System.out.println("Usage: java Gram [fichier]");
      return;
    }
    try
    {
        parser = new Gram(input);
        parser.document();
        System.out.println("analyse reussie!");
    }
    catch (ParseException e)
    {
        String msg = e.getMessage();
        msg = msg.substring(0,msg.indexOf("\n"));
        System.out.println("Erreur de syntaxe : "+msg);
    }
  }

  static final public void document() throws ParseException {
         Generation.generate(Generation.DOC,GramTokenManager.identLu);
    jj_consume_token(DOC);
    titre();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATE:
      date();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      paragraphe();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARA:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
         Generation.generate(Generation.FINDOC,GramTokenManager.identLu);
    jj_consume_token(FINDOC);
  }

  static final public void titre() throws ParseException {
         Generation.generate(Generation.TITRE,GramTokenManager.identLu);
    jj_consume_token(TITRE);
    label_2:
    while (true) {
          Generation.generate(Generation.IDENT,GramTokenManager.identLu);
      jj_consume_token(IDENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
         Generation.generate(Generation.FINTITRE,GramTokenManager.identLu);
    jj_consume_token(FINTITRE);
  }

  static final public void date() throws ParseException {
         Generation.generate(Generation.DATE,GramTokenManager.identLu);
    jj_consume_token(DATE);
         Generation.generate(Generation.ENTIER,Integer.toString(GramTokenManager.entierLu));
    jj_consume_token(ENTIER);
         Generation.generate(Generation.DOC,GramTokenManager.identLu);
    jj_consume_token(FINDATE);
  }

  static final public void paragraphe() throws ParseException {
         Generation.generate(Generation.PARA,GramTokenManager.identLu);
    jj_consume_token(PARA);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ETOILE:
                  Generation.generate(Generation.ETOILE,GramTokenManager.identLu);
        jj_consume_token(ETOILE);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
                 Generation.generate(Generation.IDENT,GramTokenManager.identLu);
      jj_consume_token(IDENT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULE:
      case POINT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULE:
                         Generation.generate(Generation.VIRGULE,GramTokenManager.identLu);
          jj_consume_token(VIRGULE);
          break;
        case POINT:
                         Generation.generate(Generation.POINT,GramTokenManager.identLu);
          jj_consume_token(POINT);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENT:
      case ETOILE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      paragraphe();
    }
         Generation.generate(Generation.FINPARA,GramTokenManager.identLu);
    jj_consume_token(FINPARA);
  }

  static private boolean jj_initialized_once = false;
  static public GramTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  static public Token token, jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x200,0x800,0x8000,0x20000,0xc0000,0xc0000,0x28000,0x800,};
   }

  public Gram(java.io.InputStream stream) {
     this(stream, null);
  }
  public Gram(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public Gram(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public Gram(GramTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  You must");
      System.out.println("       either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  public void ReInit(GramTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.Vector jj_expentries = new java.util.Vector();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  static public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[20];
    for (int i = 0; i < 20; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static final public void enable_tracing() {
  }

  static final public void disable_tracing() {
  }

}
